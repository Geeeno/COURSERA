means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(y)
columnmean(y, FALSE)
?formals
formals(add2)
formals(above)
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
y<-10
f(3)
f(2)
g(2)
!isTRUE(TRUE)
6 > -1
xor(!isTRUE(TRUE),6>-1)
1
my_vector<-c(1,2,3,4)
sum("my_vector")/length("my_vector")
sum(my_vector)/length(my_vector)
7 %% 3
7 %% 1
"start"
c(FALSE, FALSE)
X <- C(FALSE, FALSE)
x <- c(FALSE, FALSE)
p <- x
p
p[!x]
p[!x] <- l
?set.seed
set.seed(1)
set.seed(1)
x <- set.seed(1)
x
x <- set.seed(10)
x
?NegLogLike
?make.NegLogLike
?make.NegLogLik
?optim
ls()
x
p
p*1
xian <- "xazz"
x
xi
c(xi)
xian <- c(1,2)
mean(xi)
ls()
rm(list = ls())
x <- as.Date("01-01-1970")
x
x <- as.Date("1970-01-01")
x
unclass(x)
x <- as.Date("1970-01-02")
unclass(x)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
d <- as.POSIXct(x)
d
names(unclass(p))
p$mon
p$year
p$sec
unclass(d)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d %H: %M")
x
datestring
class(x)
x
x <- strptime(datestring, "%B %d %H:%M")
x
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
x[1]
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring <- c("January 10, 2012 10:40")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
cube <- function(x, n){
x^3
}
cube(3)
x <- 1:10
if(x > 5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
x
x <- array(rnorm(40), c(2, 2, 10))
x
f <- gl(3,10)
f
class(f)
names(f, "a", "b", "c")
names(f)
?gl
f
x <- c(rnorm(10), runif(10), rnorm(10, 1))
tapply(x, f, mean)
split(x, f)
y <- split(x, f)
y
y[1]
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
split(x, f1)
split(x, f2)
split(x, list(f1, f2))
split(x, list(f1, f2), DROP = TRUE)
split(x, list(f1, f2), drop = TRUE)
rm(list = ls())
makeVector <- function(x = numeric()) {
m <- NULL
y <- x
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x <- 1:5)
View(makeVector)
View(makeVector)
View(makeVector)
makeVector(x)
makeVector(x = numeric())
makeVector(x = numeric(3))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(makeVector)
View(cachemean)
cachemean(x)
y <- makevector(x)
y <- makeVector(x)
y
cachemean(y)
View(cachemean)
cachemean(y)
function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
y <- makeVector(x)
y
set <- function(y) {
x <- y
m <- NULL
}
set()
set <- function(y) {
x <<- y
m <<- NULL
}
set()
z <- matrix()
z
inv <- solve(z)
inv
m <- NULL
class(m)
get <- function() x
get()
set(x)
x
z <- 6:10
set(z)
x
m
View(makeVector)
View(makeVector)
y <- makeVector(x)
cachemean(y)
cachemean(y)
k <- 11:23
l <- makeVector(l)
l <- makeVector(k)
cachemean(l)
cachemean(y)
ls(makeVector())
ls(cachemean())
ls(makeVector())
ls(cachemean())
ls(cachemean(y))
ls(cachemean(l))
ls(cachemean(y))
ls()
rm(list = ls())
function(x = numeric()) {
m <- NULL
y <- x
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x$setmean(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ls(makeVector())
ls()
## This function creates a special "matrix"
## object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setinvm <- function(invermat) invm <<- invermat
getinvm <- function() invm
list(set = set, get = get,
setinvm = setinvm,
getinvm = getinvm)
}
## This function computes the inverse of the special "matrix" returned
## by makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then cacheSolve should retrieve the
## inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data, ...)
x$setinvm(invm)
invm
}
x <- matrix(1:9, 3, 3)
y <- makeCacheMatrix(y)
y
ls(makeCacheMatrix())
cacheSolve(y)
x$get()
y$get()
debug(cacheSolve())
debug(cacheSolve
)
cachesolve(y)
cacheSolve(y)
invm
invm
data
m
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
mat0 <- x$get()
invm <- solve(mat0, ...)
x$setinvm(invm)
invm
}
cacheSolve(y)
debug(cacheSolve)
cacheSolve(y)
mat0
mat0$get()
x$get()
n
debug(cachemean)
x
z <- 1:5
l <- makeVector(z)
class(x)
solve(x)
x <- matrix(1:4, 2, 2)
y <- cacheSolve(x)
x
solve(x)
rm(list = ls())
x <- matrix(1:4, 2, 2)
X <- 1:5
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
Y <- makeVector(X)
debug(cachemean)
cachemean(Y)
m
m
data
## This function creates a special "matrix"
## object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y) {
x <<- y
invm <<- NULL
}
get <- function() x
setinvm <- function(invermat) invm <<- invermat
getinvm <- function() invm
list(set = set, get = get,
setinvm = setinvm,
getinvm = getinvm)
}
## This function computes the inverse of the special "matrix" returned
## by makeCacheMatrix above. If the inverse has already been calculated
## (and the matrix has not changed), then cacheSolve should retrieve the
## inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinvm()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
mat0 <- x$get()
invm <- solve(mat0, ...)
x$setinvm(invm)
invm
}
makeCacheMatrix(x)
y <- makeCacheMatrix(x)
y
debug(cacheSolve)
cacheSolve(y)
invm
mat0
undebug(ls)
ls()
undebug(ls())
cacheSolve(y)
q
?debug
undebug(cacheSolve)
cacheSolve(y)
getwd()
setwd(paste(getwd(), "/COURSERA/R_Programming/WEEK_03/EX", sep = ""))
solve(x, ...)
solve(x)
## This function creates a special "matrix"
## object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinvm <- function(invermat) invm <<- invermat
getinvm <- function() invm
list(set = set, get = get,
setinvm = setinvm,
getinvm = getinvm)
}
y <- makeCacheMatrix(x)
y
cacheSolve(y)
str(makeCacheMatrix)
?dnorm
x <- dnorm(4.5, 3.25, 1.5)
x
?plot
y <- rnorm(3.25,1.5)
y <- rnorm(100,3.25,1.5)
z <- numeric(100)
?numeric
z <- 1:100
plot(z, y)
x
l <- pnorm(4.5, 3.25, 1.5)
l
l + x
l1 <- pnorm(4.5, 3.25, 1.5, FALSE)
l1
l1+l
x <- dnorm(1:100, 3.25, 1.5)
plot(z, x)
z <- seq(1,10, 100)
z
seq(0, 1, length.out = 11)
z <- seq(1,10, length.out = 100)
z
plot(z, x)
x <- dnorm(z, 3.25, 1.5)
plot(z, x)
z <- seq(-10,10, length.out = 200)
z
z <- seq(-10,10, length.out = 201)
z
x <- dnorm(z, 3.25, 1.5)
plot(z, x)
z <- seq(-5,10, length.out = 151)
x <- dnorm(z, 3.25, 1.5)
plot(z, x)
set.seed(1)
rnorm(3)
rnorm(3)
set.seed(1)
rnorm(3)
set.seed(10)
rnorm(3)
rnorm(3)
set.seed(10)
rnorm(3)
set.seed(1)
rnorm(3)
library(swirl)
rm(list = ls())
library(swirl)
swirl()
