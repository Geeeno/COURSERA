add2 <- function(x, y){
x + y
}
add2(3,5)
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x,n){
use <- x > n
x[use]
}
x <- 1:20
above10(x)
above(x,12)
above <- function(x,n = 10){
use <- x > n
x[use]
}
View(above10)
View(above)
View(above10)
View(above)
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1-.nc){
means[i] <- mean(y[,i])
}
means
}
y <- (1:20,4,5)
y <- matrix(1:20,4,5)
columnmean(y)
y
ncol(y)
columnmean(y)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean(y)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
y[1,1]<- NA
y
columnmean(y)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], no.re = removeNA)
}
means
}
columnmean(y)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(y)
columnmean(y, FALSE)
?formals
formals(add2)
formals(above)
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
y<-10
f(3)
f(2)
g(2)
!isTRUE(TRUE)
6 > -1
xor(!isTRUE(TRUE),6>-1)
1
my_vector<-c(1,2,3,4)
sum("my_vector")/length("my_vector")
sum(my_vector)/length(my_vector)
7 %% 3
7 %% 1
"start"
c(FALSE, FALSE)
X <- C(FALSE, FALSE)
x <- c(FALSE, FALSE)
p <- x
p
p[!x]
p[!x] <- l
?set.seed
set.seed(1)
set.seed(1)
x <- set.seed(1)
x
x <- set.seed(10)
x
?NegLogLike
?make.NegLogLike
?make.NegLogLik
?optim
ls()
x
p
p*1
xian <- "xazz"
x
xi
c(xi)
xian <- c(1,2)
mean(xi)
ls()
rm(list = ls())
x <- as.Date("01-01-1970")
x
x <- as.Date("1970-01-01")
x
unclass(x)
x <- as.Date("1970-01-02")
unclass(x)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
d <- as.POSIXct(x)
d
names(unclass(p))
p$mon
p$year
p$sec
unclass(d)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d %H: %M")
x
datestring
class(x)
x
x <- strptime(datestring, "%B %d %H:%M")
x
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
x[1]
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring <- c("January 10, 2012 10:40")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
cube <- function(x, n){
x^3
}
cube(3)
x <- 1:10
if(x > 5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
getwd
getwd()
setwd(paste(getwd(), "/GitHub/COURSERA/Cleaning_And_Getting_Data/WEEK_03/EX", sep = ""))
library(swirl)
swirl()
read.csv(path2csv)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(,ydf)
head(mydf)
library(dplyr)
package_version("dplyr")
package_version(dplyr)
packageversion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
class(cran)
rm("mydf")
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
FILTER(CRAN, package == "swirl")
filter(CRAN, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 | r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(CRAN, !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(R.version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_count_sorted <- arrange(top_count, desc(count))
top_count_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- filter(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
q
q()
