c(FALSE, FALSE)
X <- C(FALSE, FALSE)
x <- c(FALSE, FALSE)
p <- x
p
p[!x]
p[!x] <- l
?set.seed
set.seed(1)
set.seed(1)
x <- set.seed(1)
x
x <- set.seed(10)
x
?NegLogLike
?make.NegLogLike
?make.NegLogLik
?optim
ls()
x
p
p*1
xian <- "xazz"
x
xi
c(xi)
xian <- c(1,2)
mean(xi)
ls()
rm(list = ls())
x <- as.Date("01-01-1970")
x
x <- as.Date("1970-01-01")
x
unclass(x)
x <- as.Date("1970-01-02")
unclass(x)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
d <- as.POSIXct(x)
d
names(unclass(p))
p$mon
p$year
p$sec
unclass(d)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d %H: %M")
x
datestring
class(x)
x
x <- strptime(datestring, "%B %d %H:%M")
x
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
x[1]
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring <- c("January 10, 2012 10:40")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
cube <- function(x, n){
x^3
}
cube(3)
x <- 1:10
if(x > 5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
getwd()
act.dir <- "C:\Users\Amaris_Consultant\Documents\GitHub\COURSERA\Cleaning_And_Getting_Data\WEEK_01\EX"
a <- "C:\Users\Amaris_Consultant\Documents\GitHub\COURSERA\Cleaning_And_Getting_Data\WEEK_01\EX"
a <- as.character("C:\Users\Amaris_Consultant\Documents\GitHub\COURSERA\Cleaning_And_Getting_Data\WEEK_01\EX")
a <- "C:/Users/Amaris_Consultant\Documents\GitHub\COURSERA\Cleaning_And_Getting_Data/WEEK_01/EX"
a <- "C:/Users/Amaris_Consultant/Documents/GitHub/COURSERA/Cleaning_And_Getting_Data/WEEK_01/EX"
setwd(a)
install.packages("jsonlite")
library(jsonlite)
url <- "https://api.github.com/users/Geeeno/repos"
jsondata <- fromJSON(url)
names(jsondata)
class(jsondata)
jsondata@owner
jsondata[owner]
jsondata[[owner]]
jsondata[["owner"]]
jsondata[,"owner"]
jsondata$"owner"$login
View(jsondata)
View(jsondata)
dim(jsondata)
jsondata$"owner.login"
jsondata$owner.login
jsondata$owner$login
jsondata$owner$id
jsondata$name
names(jsondata$owner)
iris
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
head(iris)
install.packages("data.table")
library(data.table)
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <<- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9])
}
classifica("b")
library(RCurl)
classifica("b")
library(XML)
classifica("b")
data.table(classifica.data)
classifica.serieb <- data.table(classifica.data)
tables()
classifica.serieb[classifica.serieb$squadra=="Salernnitana"]
classifica.serieb[classifica.serieb$squadra=="Salern."]
classifica.serieb[c(2,3)]
classifica.serieb[,c(2,3)]
class(classifica.serieb)
rm("classifica.serieb")
classifica.serieb <- data.table(classifica.data)
class(classifica.serieb)
a <- data.table(a = c(1:10), l = LETTERS[1:10])
class(a)
{}
{+}
{x=1, y=2}
a <- {x=1; y=2}
a
print(a)
a[1,]
a[1]
a[2]
a[[x]]
a[[y]]
a <- {x=1, y=2}
View(classifica.serieb)
View(classifica.serieb)
classifica.serieb[,list(mean(Punti), mean(Giornate))]
classifica.serieb[,1]
classifica.serieb[,1] <- as.numeric(classifica.serieb[,1])
classifica.serieb[,1] <- as.integer(classifica.serieb[,1])
class(classifica.serieb[,1])
classifica.serieb[[Rank]] <- as.integer(classifica.serieb[[Rank]])
classifica.serieb[[Rank]]
classifica.serieb[Rank]
classifica.serieb$Rank
class(classifica.serieb$Rank)
classifica.serieb$Rank <- as.numeric(classifica.serieb$Rank)
classifica.serieb$Punti <- as.numeric(classifica.serieb$Punti)
rm(list = ls())
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <<- data.frame(as.numeric(classifica[1]), squadra = team, as.numeric(classifica[2]), as.numeric(classifica[3]), as.numeric(classifica[4]), as.numeric(classifica[5]), as.numeric(classifica[6]), as.numeric(classifica[7]), as.numeric(classifica[8]), as.numeric(classifica[9]))
}
classifica("b")
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <<- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9])
for (i in 1:8){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
}
classifica("b")
classifica.serieb <- data.table(classifica.data)
classifica.serieb[,list(mean(Punti), mean(Giornate))]
class(classifica.data$Punti)
debug(classifica)
classifica("b")
rm(list = ls())
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9])
for (i in 1:8){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
classifica.data <<- classifica.data
}
classifica("b")
class(classifica.data$Punti)
classifica.serieb <- data.table(classifica.data)
classifica.serieb[,list(mean(Punti), mean(Giornate))]
View(classifica.serieb)
View(classifica.serieb)
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9])
classifica.data[, 1] <- as.numeric(classifica.data[, 1])
for (i in 3:9){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
classifica.data <<- classifica.data
}
classifica("b")
classifica.serieb <- data.table(classifica.data)
classifica.serieb[,list(mean(Punti), mean(Giornate))]
View(classifica.serieb)
View(classifica.data)
?xpathApply
?xmlValue
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- as.numeric(xpathSApply(doc, "//td[@class='a-center']", xmlValue))
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9])
classifica.data[, 1] <- as.numeric(classifica.data[, 1])
for (i in 3:9){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
classifica.data <<- classifica.data
}
classifica("b")
debug(classifica)
classifica("b")
punti
sum(punti)
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9])
classifica.data[, 1] <- as.numeric(classifica.data[, 1])
for (i in 3:9){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
classifica.data <<- classifica.data
}
debug(classifica)
classifica("b")
class(punti)
class(classifica)
class(classifica[1])
class(classifica[[1]])
class(classifica[[2]])
View(classifica.data)
class(classifica.data[, 1])
class(classifica.data[, 2])
class(classifica.data[, 3])
class(team)
?data.frame
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9], stringsAsFactors = FALSE)
classifica.data[, 1] <- as.numeric(classifica.data[, 1])
for (i in 3:9){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
classifica.data <<- classifica.data
}
debug(classifica)
classifica("b")
View(classifica.data)
class(classifica.data$Punti)
class(classifica.data$Punti)
class(classifica.data$Rank)
classifica <- function(serie = "a"){
if (serie == "a"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-a.html?cookieAccept"
}else if( serie == "b"){
url <- "http://www.corrieredellosport.it/live/classifica-serie-b.html?cookieAccept"
}else{
message("Errore: Nessun campionato trovato")
}
doc <- htmlTreeParse(url, useInternalNodes = TRUE)
team <- xpathSApply(doc, "//td[@class='team-name']", xmlValue)
team <- gsub("\n", "", team)
team <- gsub("\t", "", team)
punti <- xpathSApply(doc, "//td[@class='a-center']", xmlValue)
punti <- gsub("\n", "", punti)
punti <- gsub("\t", "", punti)
n.team <- length(team)
f <- rep(1:9, n.team)
classifica <- split(punti, f)
nomi.tab <- c("Rank", "Punti", "Giornate", "Vinte", "Pareggiate", "Perse", "Gol Fatti", "Gol Subiti", "Ultime Giornate")
names(classifica) <- nomi.tab
classifica.data <- data.frame(classifica[1], squadra = team, classifica[2], classifica[3], classifica[4], classifica[5], classifica[6], classifica[7], classifica[8], classifica[9], stringsAsFactors = FALSE)
classifica.data[, 1] <- as.numeric(classifica.data[, 1])
for (i in 3:9){
classifica.data[, i] <- as.numeric(classifica.data[, i])
}
classifica.data <<- classifica.data
}
classifica.serieb[,list(mean(Punti), mean(Giornate))]
classifica.serieb <- data.table(classifica.data)
classifica.serieb[,list(mean(Punti), mean(Giornate))]
View(classifica.serieb)
table(classifica.serieb)
tables()
classifica.serieb[, table(Punti)]
classifica.serieb[, table(squadra)]
classifica.serieb[, Salva:=Punti>=40]
View(classifica.serieb)
View(classifica.serieb)
classifica.serieb[, con:=1, by=Salva]
View(classifica.serieb)
classifica.serieb[, con:=Giornate-Vinte, by=Salva]
View(classifica.serieb)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = ./data2/Idaho_house.csv)
dir()
dir.create("data_quiz")
dir()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = ./data_quiz/Idaho_house.csv)
fileurl <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv""
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileurl, destfile = ./data_quiz/Idaho_house.csv)
download.file(fileurl, destfile = "./data_quiz/Idaho_house.csv")
idaho.house <- read.csv("./data_quiz/Idaho_house.csv")
idaho.house[table(validate())]
idaho.house[table(VAL)]
names(idaho.house)
?table
idaho.house[,table(VAL)]
idaho.house[,VAL]
idaho.house[[VAL]
]
idaho.house[[VAL]]
View(idaho.house)
table(idaho.house$VAL)
fileurl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
library(XLConnect)
vignette("XLConnect")
download.file(fileurl2, destfile = "./data_quiz/dat.xlsx")
dat <- readWorksheetFromFile("dat.xlsx")
fileurl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileurl2, destfile = "./data_quiz/dat.xlsx")
dat00 <- readWorksheetFromFile("gov_NGAP.xlsx")
fileex <- "gov_NGAP.xlsx"
dat00 <- readWorksheetFromFile(fileex)
dat00 <- readWorksheetFromFile("./data_quiz/gov_NGAP.xlsx")
dat00 <- loadWorkbook("./data_quiz/gov_NGAP.xlsx", create = TRUE)
dat <- readWorksheet(dat00, sheet = "NGAP Sample Data", startRow = 18, endRow = 23, startCol = 7, endCol = 15)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
fileurl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- htmlTreeParse(fileurl3, useInternalNodes = TRUE)
doc <- xmlTreeParse(fileurl3, useInternalNodes = TRUE)
doc <- htmlTreeParse(fileurl3, useInternalNodes = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
zip.code <- xpathSApply(doc,"//zipcode", xmlValue)
table(zip.code)
zip.code
doc <- htmlTreeParse(fileurl3)
readHTMLTable(fileurl3)
library(RCurl)
xData <- getURL(fileurl3, useragent = myAgent, encoding = "UTF-8"
,httpheader = c(Accept = myAccept))
xData <- getURL(fileurl3, encoding = "UTF-8")
doc <- htmlTreeParse(xData, useInternalNodes = TRUE)
zip.code <- xpathSApply(doc,"//zipcode", xmlValue)
zip.code
TABLE(zip.code)
table(zip.code)
